import telebot
from telebot import types
from flask import Flask, request
from io import BytesIO
import os

TOKEN = os.environ.get("TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ Render
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –£—Å—Ç–∞–Ω–æ–≤–∏ WEBHOOK_URL –≤ Render
OWNER_ID = int(os.environ.get("OWNER_ID"))

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

CATEGORY_GROUPS = {
    "üëö –ë–ª—É–∑–∫–∏ –∏ —Ä—É–±–∞—à–∫–∏": "-1002606758634",
    "üëñ –ë—Ä—é–∫–∏": "-1002878121543",
    "üß• –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞": "-1002708682492",
    "üß∂ –î–∂–µ–º–ø–µ—Ä—ã –∏ –∫–∞—Ä–¥–∏–≥–∞–Ω—ã": "-1002879108725",
    "üëñ –î–∂–∏–Ω—Å—ã": "-1002836744118",
    "üßµ –ö–æ–º–±–∏–Ω–µ–∑–æ–Ω—ã": "-1002656275181",
    "ü©≤ –ü–æ–ª—É–∫–æ–º–±–∏–Ω–µ–∑–æ–Ω—ã": "-1002150521388",
    "üß≥ –ö–æ—Å—Ç—é–º—ã": "-1002608986444",
    "üé© –ü–∏–¥–∂–∞–∫–∏ –∏ –∂–∞–∫–µ—Ç—ã": "-1002742850789",
    "üéΩ –õ–æ–Ω–≥—Å–ª–∏–≤—ã": "-1002755396225",
    "üëò –¢—É–Ω–∏–∫–∏": "-1002678676027",
    "üß• –•—É–¥–∏ –∏ —Å–≤–∏—Ç—à–æ—Ç—ã": "-1002771480706",
    "üß• –•–∞–ª–∞—Ç—ã": "-1002854636960",
    "ü©≥ –®–æ—Ä—Ç—ã": "-1002835220487",
    "üëó –Æ–±–∫–∏": "-1002625493646",
    "üëô –ë–µ–ª—å–µ": "-1002819820386",
    "üé≠ –ö–∞—Ä–Ω–∞–≤–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã": "-1002408380902",
    "üëï –§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ø—ã": "-1002674261873",
    "üëó –ü–ª–∞—Ç—å—è –∏ —Å–∞—Ä–∞—Ñ–∞–Ω—ã": "-1002897926896"
}

PHOTO_QUEUE = {}

# === Webhook route ===
@app.route("/", methods=["GET"])
def index():
    return "ShveiBot is alive!", 200

@app.route("/", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "unsupported", 403

@app.route('/photo', methods=['POST'])
def receive_photo():
    user_id = int(request.form['user_id'])
    username = request.form.get('username', '-')
    first_name = request.form.get('first_name', '-')
    phone = request.form.get('phone', '-')

    # üìå –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ (–∏ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    caption = (
        "‚úÇÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó ‚úÇÔ∏è\n\n"
        "–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –ø–æ—à–∏–≤ ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–µ–π —Ü–µ–Ω–æ–π –∏ —Å—Ä–æ–∫–∞–º–∏.\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –ø–æ—à–∏–≤–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
    )

    # ‚úÖ –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–æ—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑
    raw_bytes = request.files['photo'].read()

    # ‚úÖ –°–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞
    owner_file = BytesIO(raw_bytes)
    group_file = BytesIO(raw_bytes)

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
    PHOTO_QUEUE[user_id] = {'file': group_file, 'caption': caption}

    # üì• –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    markup = types.InlineKeyboardMarkup()
    for cat in CATEGORY_GROUPS:
        markup.add(types.InlineKeyboardButton(cat, callback_data=f"cat:{user_id}:{cat}"))

    bot.send_photo(OWNER_ID, owner_file, caption=caption, reply_markup=markup)

    return "ok", 200



@bot.message_handler(commands=['start'])
def bot_start(message):
    bot.send_message(message.chat.id, "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")

@bot.message_handler(content_types=['photo'])
def handle_photo_from_user(message):
    user_id = message.chat.id
    file_id = message.photo[-1].file_id
    PHOTO_QUEUE[user_id] = {'file_id': file_id}

    markup = types.InlineKeyboardMarkup()
    for cat in CATEGORY_GROUPS:
        markup.add(types.InlineKeyboardButton(cat, callback_data=f"cat_user:{user_id}:{cat}"))

    bot.send_photo(user_id, file_id, caption="üßµ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—à–∏–≤–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_user:"))
def handle_user_category(call):
    _, user_id_str, cat = call.data.split(":", 2)
    user_id = int(user_id_str)
    data = PHOTO_QUEUE.get(user_id)
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    file_id = data['file_id']
    group_id = CATEGORY_GROUPS.get(cat)

    try:
        bot.send_photo(group_id, file_id, caption="‚úÇÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑. –û—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ü–µ–Ω–æ–π –∏ —Å—Ä–æ–∫–∞–º–∏.")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{cat}¬ª.")
        del PHOTO_QUEUE[user_id]
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat:"))
def choose_category(call):
    _, user_id_str, cat = call.data.split(":", 2)
    user_id = int(user_id_str)
    data = PHOTO_QUEUE.get(user_id)
    if not data:
        bot.send_message(call.message.chat.id, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    group_id = CATEGORY_GROUPS.get(cat)

    try:
        bot.send_photo(group_id, data['file'], caption=data['caption'])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{cat}¬ª.")
        del PHOTO_QUEUE[user_id]
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# === Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ===
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
